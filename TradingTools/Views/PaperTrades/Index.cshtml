@model PaperTradesVM

<partial name="~/Views/Shared/_LoadingIndicator.cshtml" />
<input type="hidden" value="@Model.CurrentTrade.Id" id="currentTradeIdInput"/>
<div class="hideMyContent" id="myContent">
    <div class="row justify-content-center align-items-top">
        <div class="col-10 text-center">
            <h2>
                @(Model.CurrentTrade != null ? "Paper Trades" : "No Paper Trades Yet")
            </h2>
            @if (Model.CurrentTrade != null)
            {
                <!-- Menus -->
                <div class="container mb-4">
                    <div class="row justify-content-center">
                        <!-- Menu Time Frame -->
                        <div class="col-auto p-2">
                            <div class="dropdown">
                                <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton"
                                        data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    Time Frame: <span id="currentTimeFrame">@MyEnumConverter.SetTimeFrameFromEnum(Model.CurrentTrade.TimeFrame)</span>
                                </button>
                                <div class="dropdown-menu animated--fade-in" id="menuTimeFrame" aria-labelledby="dropdownMenuButton">
                                    @foreach (TimeFrame tf in Enum.GetValues(typeof(TimeFrame)))
                                    {
                                        <a class="dropdown-item" href="#">@MyEnumConverter.SetTimeFrameFromEnum(tf)</a>
                                    }
                                </div>
                            </div>
                        </div>
                        <!-- Menu Strategy -->
                        <div class="col-auto p-2">
                            <div class="dropdown">
                                <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    Strategy: <span id="currentStrategy">@MyEnumConverter.SetStrategyFromEnum(Model.CurrentTrade.Strategy)</span>
                                </button>
                                <div class="dropdown-menu animated--fade-in" id="menuStrategy" aria-labelledby="dropdownMenuButton">
                                    @foreach (Strategy strategy in Enum.GetValues(typeof(Strategy)))
                                    {
                                        <a class="dropdown-item" href="#">@MyEnumConverter.SetStrategyFromEnum(strategy)</a>
                                    }
                                </div>
                            </div>
                        </div>
                        <!-- Menu Sample Size -->
                        <div class="col-auto p-2">
                            <div class="dropdown">
                                <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    Sample Size: <span id="currentSampleSize">@(Model.NumberSampleSizes)</span>
                                </button>
                                <div class="dropdown-menu animated--fade-in" id="menuSampleSize" aria-labelledby="dropdownMenuButton">
                                    @for (int i = 0; i < Model.NumberSampleSizes; i++)
                                    {
                                        <a class="dropdown-item" href="#">@(Model.NumberSampleSizes - i)</a>
                                    }
                                </div>
                            </div>
                        </div>
                        <!-- Menu Trade -->
                        <div class="col-auto p-2">
                            <div class="dropdown">
                                <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    Trade: <span id="currentTrade">@Model.TradesInSampleSize</span>
                                </button>
                                <div class="dropdown-menu animated--fade-in" id="menuTrade" aria-labelledby="dropdownMenuButton">
                                    @for (int i = 0; i < Model.TradesInSampleSize; i++)
                                    {
                                        <a class="dropdown-item" role="button">@(Model.TradesInSampleSize - i)</a>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Images -->
                <div class="row justify-content-center">
                    <div class="col-10">
                        <div id="carouselTrades" class="carousel slide" data-interval="false">
                            <div id="imageContainer">
                                <ol class="carousel-indicators">
                                    @for (int i = 0; i < Model.CurrentTrade.ScreenshotsUrls.Count; i++)
                                    {
                                        <li data-bs-target="#carouselTrades" data-slide-to="@(i)" @(i == 0 ? "class=\"active\"" : "")></li>
                                    }
                                </ol>
                                <div class="carousel-inner">

                                    @for (int i = 0; i < Model.CurrentTrade.ScreenshotsUrls.Count; i++)
                                    {
                                        <div class="@(i == 0? "carousel-item active" : "carousel-item")">
                                            <img src="@Model.CurrentTrade.ScreenshotsUrls[i]" class="d-block w-100" alt="...">
                                        </div>
                                    }
                                </div>
                            </div>
                            <a class="carousel-control-prev" href="#carouselTrades" role="button" data-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="sr-only">Previous</span>
                            </a>
                            <a class="carousel-control-next" href="#carouselTrades" type="button" data-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="sr-only">Next</span>
                            </a>
                        </div>
                    </div>
                </div>

                <!-- Journaling begin -->
                <div class="row justify-content-center mt-3">
                    <div class="col-10 text-center">
                        <div class="card shadow mb-4">
                            <div class="card-header py-3">
                                <div class="row align-items-center">
                                    <div class="col-auto">
                                        <h6 class="m-0 font-weight-bold text-primary">Journal</h6>
                                    </div>
                                    <div class="col mr-md-5 d-flex justify-content-center">
                                        <ul class="nav nav-tabs" id="journalTabs" role="tablist">
                                            <li class="nav-item" role="presentation">
                                                <button class="nav-link active" id="pre-tab" data-toggle="tab" data-target="#pre" type="button" role="tab" aria-controls="pre" aria-selected="true">Pre</button>
                                            </li>
                                            <li class="nav-item">
                                                <button class="nav-link" id="during-tab" data-toggle="tab" data-target="#during" type="button" role="tab" aria-controls="during" aria-selected="false">During</button>
                                            </li>
                                            <li class="nav-item">
                                                <button class="nav-link" id="exit-tab" data-toggle="tab" data-target="#exit" type="button" role="tab" aria-controls="exit" aria-selected="false">Exit</button>
                                            </li>
                                            <li class="nav-item">
                                                <button class="nav-link" id="post-tab" data-toggle="tab" data-target="#post" type="button" role="tab" aria-controls="post" aria-selected="false">Post</button>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="tab-content" id="tabContent">
                                    <div class="tab-pane fade show active" id="pre" role="tabpanel" aria-labelledby="pre-tab">
                                        <p id="showPre">@Model.Journal.Pre</p>
                                    </div>
                                    <div class="tab-pane fade" id="during" role="tabpanel" aria-labelledby="during-tab">
                                        <p id="showDuring">@Model.Journal.During</p>
                                    </div>
                                    <div class="tab-pane fade" id="exit" role="tabpanel" aria-labelledby="exit-tab">
                                        <p id="showExit">@Model.Journal.Exit</p>
                                    </div>
                                    <div class="tab-pane fade" id="post" role="tabpanel" aria-labelledby="post-tab">
                                        <p id="showPost">@(Model.Journal.Post == null ? "Double click to add text" : Model.Journal.Post)</p>
                                    </div>
                                    <div id="summernote" class="hidden-element">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="journalEntry">
                            <i class="fa-solid fa-pen-to-square"></i>
                        </div>
                    </div>
                    <!-- Journaling End  -->
                </div>
            }
            else
            {
                // Upload trades (when the DB is empty)
                <form method="post" enctype="multipart/form-data" id="formUploadFile" asp-action="UploadTrades">
                    <input type="file" name="zipFile" id="fileInput" style="display:none" accept=".zip" />
                    <a class="button d-flex flex-column align-items-center justify-content-center mt-5" role="button" id="uploadFileButton" onclick="document.getElementById('fileInput').click()">
                        <i class="fa-regular fa-folder-open fa-2xl mb-3"></i>
                        <span>Upload Trades</span>
                    </a>
                </form>
            }
        </div>
    </div>
</div>
@section Scripts {
    <script src="~/js/paperTrades.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.js"></script>
}