// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250210104124_UpdateTradeColumnName2")]
    partial class UpdateTradeColumnName2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Journal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("During")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Post")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Journals");
                });

            modelBuilder.Entity("Models.ResearchFirstBarPullback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<double?>("EntryPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("0");

                    b.Property<double?>("ExitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("0");

                    b.Property<double?>("Fee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("FullATRMarketGaveSmth")
                        .HasColumnType("bit");

                    b.Property<int>("FullATRMaxRR")
                        .HasColumnType("int");

                    b.Property<int>("FullATROneToOneHitOn")
                        .HasColumnType("int");

                    b.Property<bool>("Is4HTrending")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBreakeven")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDTrending")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEntryAfter3To5Bars")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEntryAfter5Bars")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEntryAfteriBar")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEntryAtPreviousSwingOnTrigger")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEntryBeforePreviousSwingOn4H")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEntryBeforePreviousSwingOnD")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEntryBeforePreviousSwingOnTrigger")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFullATRBreakeven")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFullATRLoss")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFullATROneToFiveHit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFullATROneToThreeHit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMomentumTrade")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOneToFiveHit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOneToThreeHit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSignalBarInTradeDirection")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSignalBarStrongReversal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrendTrade")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTriggerTrending")
                        .HasColumnType("bit");

                    b.Property<int?>("JournalId")
                        .HasColumnType("int");

                    b.Property<bool>("MarketGaveSmth")
                        .HasColumnType("bit");

                    b.Property<int>("MaxRR")
                        .HasColumnType("int");

                    b.Property<int>("OneToOneHitOn")
                        .HasColumnType("int");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<int>("Outcome")
                        .HasColumnType("int");

                    b.Property<double?>("PnL")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("ResearchId")
                        .HasColumnType("int");

                    b.Property<int>("SampleSizeId")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("ScreenshotsUrls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SideType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("StopPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Targets")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int>("TradeRating")
                        .HasColumnType("int");

                    b.Property<int>("TradeType")
                        .HasColumnType("int");

                    b.Property<double?>("TriggerPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.HasIndex("JournalId");

                    b.HasIndex("SampleSizeId");

                    b.ToTable("ResearchFirstBarPullbacks");
                });

            modelBuilder.Entity("Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("First")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Forth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Second")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Third")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Models.SampleSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int>("Strategy")
                        .HasColumnType("int");

                    b.Property<int>("TimeFrame")
                        .HasColumnType("int");

                    b.Property<int>("TradeType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.ToTable("SampleSizes");
                });

            modelBuilder.Entity("Models.Trade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<double?>("EntryPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("0");

                    b.Property<double?>("ExitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("0");

                    b.Property<double?>("Fee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("JournalId")
                        .HasColumnType("int");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<int>("Outcome")
                        .HasColumnType("int");

                    b.Property<double?>("PnL")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("ResearchId")
                        .HasColumnType("int");

                    b.Property<int>("SampleSizeId")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("ScreenshotsUrls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SideType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("StopPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Targets")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int>("TradeRating")
                        .HasColumnType("int");

                    b.Property<int>("TradeType")
                        .HasColumnType("int");

                    b.Property<double?>("TriggerPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.HasIndex("JournalId");

                    b.HasIndex("SampleSizeId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("Models.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AccountSize")
                        .HasColumnType("float");

                    b.Property<double>("ExchSizeLimit")
                        .HasColumnType("float");

                    b.Property<double>("MaxSlippage")
                        .HasColumnType("float");

                    b.Property<int>("PTStrategy")
                        .HasColumnType("int");

                    b.Property<int>("PTTimeFrame")
                        .HasColumnType("int");

                    b.Property<double>("ScaleOut")
                        .HasColumnType("float");

                    b.Property<double>("TradeFee")
                        .HasColumnType("float");

                    b.Property<double>("TradeRisk")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Models.ResearchFirstBarPullback", b =>
                {
                    b.HasOne("Models.Journal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId");

                    b.HasOne("Models.SampleSize", "SampleSize")
                        .WithMany()
                        .HasForeignKey("SampleSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journal");

                    b.Navigation("SampleSize");
                });

            modelBuilder.Entity("Models.SampleSize", b =>
                {
                    b.HasOne("Models.Review", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Models.Trade", b =>
                {
                    b.HasOne("Models.Journal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId");

                    b.HasOne("Models.SampleSize", "SampleSize")
                        .WithMany()
                        .HasForeignKey("SampleSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journal");

                    b.Navigation("SampleSize");
                });
#pragma warning restore 612, 618
        }
    }
}
